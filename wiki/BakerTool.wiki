#summary Baker Tool Overview

= Introduction =

The baker tool is a command-line tool that allows you to capture detail attributes from high resolution meshes and bake them into textures, so that they can be applied to lower resolution surfaces.

You can browse the source code of the baker tool here:

http://code.google.com/p/nvidia-mesh-tools/source/browse/#svn/trunk/src/nvmesh/tools/baker

The NVIDIA baker tool supports some unique features not available in other similar tools:

  * Support for different kind of base surfaces, including various subdivision surface approximations, such as Bezier ACC, Gregory ACC, and Pm patches.
  * Capture details using dual parameterizations instead of raycasting. This imposes some constraints on the input assets, but produces much higher quality results.
  * Support for vector displacement maps.


= Command-line Options =

== General Options ==

  * *--width* - Width of the output textures. _Defaults to 1024_.
  * *--height* - Height of the output textures. _Defaults to 1024_.
  * *--threads* - Number of threads to be used to compute ambient occlusion. _Default to 0, which chooses a number equal to the number of processors_.
  * *--output* - File name prefix for the generated textures. _Defaults to "output"_.

== Base Pass Options ==

  * *--lomesh* - File name of the base mesh.
  * *--losub* - Subdivision levels applied to the base mesh. _Defaults to 0_.
  * *--lomode* - Mode of the base mesh: 
    * 0 = Bezier ACC surface. _(default)_
    * 1 = Gregory ACC surface.
    * 2 = Triangular mesh.
  * *--disp3D* - Generate vector displacements.
  * *--tangentSpace* - Generate normals and vector displacements in tangent space.

== Detailed Pass Options ==

  * *--himesh* - File name of the detailed mesh.
  * *--hisub* - Subdivision levels applied to the detailed mesh. _Defaults to 0_.
  * *--hidisp* - Displacement map for detailed mesh.
  * *--hinmap* - Normal map for detailed mesh.
  * *--hisupersampling* - Enable supersampling. _Disabled by default_.
  * *--hipos* - Output position map.
  * *--occlusion* - Output occlusion map.
  * *--bentnormal* - Output bent normal map.
  * *--rays* - Number of rays to compute ambient occlusion. _Defaults to 64_.
  * *--maxdistratio* - Maximum occlusion distance with respect to the mesh size. _Defaults to 0.25_.
  * *--ilmocclusion* - Use binary occlusion instead of attenuated visibility.
  * *--hicachedir* - Directory for saving and reading the cached data.
  * *--rebuildcache* - Load original data and recompute cache.

= Implementation =

The baker tool generally loads two meshes, a high resolution detailed mesh and a low resolution base mesh. These two meshes must have the same parameterization. That is, if you rasterize the two meshes in texture space, the output of the two meshes should overlap almost exactly.

The baker tool, relies on this dual parameterization in order to transfer attributes from one mesh to the other.


== Geometry Image ==

The !GeometryImage class is just a wrapper over a floating point image. It simply provides some constructors to allocate an image with the appropriate number of channels, and some accessors to easily access these channels.

Two geometry images are used in the baker tool. The detailed mesh pass generates a geometry image that contains position and normal attributes that are both in object space. The base mesh pass generates a geometry image with position and normal attributes too, but in addition to that it also generates displacement maps and tangent space normal maps.

The geometry image simply provides a mechanism to store these attributes, apply some filtering to them and save them to disk.


== Base Surface ==

== Base Mesh Pass ==

== Detail Mesh Pass ==

== Filtering ==

Several kind of filters are supported. I generally use several iterations of a [http://code.google.com/p/nvidia-mesh-tools/source/browse/trunk/src/nvimage/HoleFilling.cpp#465 quadratic extrapolation filter] followed by a [http://code.google.com/p/nvidia-mesh-tools/source/browse/trunk/src/nvimage/HoleFilling.cpp#388 push-pull filter] or a [http://code.google.com/p/nvidia-mesh-tools/source/browse/trunk/src/nvimage/HoleFilling.cpp#153 Voronoi filling filter].